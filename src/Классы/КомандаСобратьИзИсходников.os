///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Выполнение команды/действия в 1С:Предприятие в режиме тонкого/толстого клиента с передачей запускаемых обработок и параметров
//
// TODO добавить фичи для проверки команды
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать v8runner

Перем Лог;
Перем МенеджерКонфигуратора;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Сборка cf-файла из исходников.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды,
		ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src",
		"Путь к каталогу с исходниками, пример: --src=./cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-s",
		"Краткая команда 'путь к исходникам --src', пример: -s ./cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--out", "Путь к файлу cf (*.cf), --out=./1Cv8.cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-o",
		"Краткая команда 'Путь к файлу cf --out', пример: -o ./1Cv8.cf");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--ibconnection", "Строка подключения к БД (/FfilePath или /SserverPath)
		|	Например, для файловых баз --ibconnection /FC:\base1 или --ibconnection /F./base1 или --ibconnection /Fbase1
		|	Или для серверных баз --ibconnection /Sservername\basename.
		|	Если строка подключения к БД не задана, то выгрузка будет выполняться через временную файловую БД.");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--current", "Флаг загрузки в указанную базу или -с.
		|	При использовании этого параметра обязательно указание строки подключения к БД через параметр --ibconnection
		|	или --settings.
		|	Если задан флаг загрузки в указанную базу, то файл создаваться не будет.");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-c", "Флаг загрузки в указанную базу, краткая форма от --current");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--list", "Список файлов для загрузки");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--noupdate", "Флаг обновление СonfigDumpInfo.xml");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Попытка
		Лог = ДополнительныеПараметры.Лог;
	Исключение
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецПопытки;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ПутьВходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-s", "--src"));
	ПутьИсходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды,"-o", "--out"));
	ВерсияПлатформы = ПараметрыКоманды["--v8version"];
	СписокФайлов = ПараметрыКоманды["--list"];
	СтрокаПодключения = ДанныеПодключения.СтрокаПодключения;
	ОбновлятьДамп = НЕ ПараметрыКоманды["--noupdate"];

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;

	Попытка
		ВТекущуюКонфигурацию = ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-c", "--current");
		Если ТипЗнч(ВТекущуюКонфигурацию) = Тип("Булево") И ВТекущуюКонфигурацию Тогда
			МенеджерКонфигуратора.Инициализация(ДанныеПодключения.СтрокаПодключения,
				ДанныеПодключения.Пользователь, ДанныеПодключения.Пароль,
				ВерсияПлатформы, ПараметрыКоманды["--uccode"], ДанныеПодключения.КодЯзыка);

			МенеджерКонфигуратора.СобратьИзИсходниковТекущуюКонфигурацию(
				ПутьВходящий,
				СписокФайлов, Истина, ОбновлятьДамп);
		Иначе
			СобратьИзИсходниковФайлКонфигурации(ПутьВходящий, ПутьИсходящий, ДанныеПодключения, ВерсияПлатформы, ОбновлятьДамп);
		КонецЕсли;
	Исключение
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	МенеджерКонфигуратора.Деструктор();

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду

Процедура СобратьИзИсходниковФайлКонфигурации(ПутьВходящий, ПутьИсходящий, ДанныеПодключения,
	ВерсияПлатформы, ОбновлятьФайлВерсий)

	ЗаполненыДанныеПодключения = ЗначениеЗаполнено(ДанныеПодключения.ПутьБазы);

	Если ЗаполненыДанныеПодключения Тогда
		СтрокаПодключения = ДанныеПодключения.ПутьБазы;
		Пользователь = ДанныеПодключения.Пользователь;
		Пароль = ДанныеПодключения.Пароль;
	Иначе	
		КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();
		СтрокаПодключения = "/F""" + КаталогВременнойБазы + """";
		Пользователь = "";
		Пароль = "";
	КонецЕсли;

	МенеджерКонфигуратора.Инициализация(СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы, ,
		 ДанныеПодключения.КодЯзыка);
	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();

	Если НЕ ЗаполненыДанныеПодключения Тогда
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
	КонецЕсли;

	МенеджерКонфигуратора.СобратьИзИсходниковТекущуюКонфигурацию(ПутьВходящий, , , ОбновлятьФайлВерсий);
	МенеджерКонфигуратора.ВыгрузитьКонфигурациюВФайл(ПутьИсходящий);

	Если НЕ ЗаполненыДанныеПодключения Тогда
		ВременныеФайлы.УдалитьФайл(КаталогВременнойБазы);
	КонецЕсли;	

КонецПроцедуры